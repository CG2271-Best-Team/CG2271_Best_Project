#include "MKL25Z4.h"
#define BAUD_RATE 9600
#define UART_TX_PORTE22 22
#define UART_RX_PORTE23 23
#define UART2_INT_PRIO 128

void initUART2(uint32_t baud_rate)
{
  uint32_t divisor, bus_clock;
  
  SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
  SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK;
  
  PORTE->PCR[UART_TX_PORTE22] &= ~PORT_PCR_MUX_MASK;
  PORTE->PCR[UART_TX_PORTE22] |= PORT_PCR_MUX(4); // setting the pin 22 to UART transmit function
  
  PORTE->PCR[UART_RX_PORTE23] &= ~PORT_PCR_MUX_MASK;
  PORTE->PCR[UART_RX_PORTE23] |= PORT_PCR_MUX(4); // setting the pin 22 to UART transmit function
  
  UART2->C2 &= ~((UART_C2_TE_MASK) | (UART_C2_RE_MASK)); // disable the transmit and receive functions first to configure other parts
  
  bus_clock = (DEFAULT_SYSTEM_CLOCK/2); // this is the UART module clock
  divisor = bus_clock / (baud_rate * 16); // this is the value to be stored in SBR[12:0], representative of the baud rate
  UART2->BDH = UART_BDH_SBR(divisor >> 8); // upper 5 bits of SBR[12:0] stored in BDH register
  UART2->BDL = UART_BDL_SBR(divisor); // lower 8 bits of SBR[12:0] stored in BDL register
  
  UART2->C1 = 0; // no parity bit
  UART2->S2 = 0; // do not need to configure
  UART2->C3 = 0; // 9 bits data bus, do not need to configure
  
  UART2->C2 |= ((UART_C2_TE_MASK) | (UART_C2_RE_MASK)); // enable the transmit and receive functions now
}

void UART2_Transmit_Poll(uint8_t data)
{
  while(!(UART2->S1 & UART_S1_TDRE_MASK)); // wait until the transmit data bus is empty before writing to it
  UART2->D = data; // writing data to the transmit data bus in UART_D register
}

uint8_t UART2_Receive_Poll(void)
{
  while(!(UART2->S1 & UART_S1_RDRF_MASK)); // wait until the receive data bus is full before reading
  return (UART2->D); // read from the receive data bus in UART_D register
}

static void delay(volatile uint32_t nof)
{
  while(nof!=0)
  {
    __asm("NOP");
    nof--;
  }
}

int main(void)
{
  uint8_t rx_data = 0x69;
  
  SystemCoreClockUpdate();
  initUART2(BAUD_RATE);
  
  while(1)
  {
    UART2_Transmit_Poll(0x69);
    delay(0x80000);
  }
}
